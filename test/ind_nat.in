Definition nat : Type :=
	ind nat : Type | nat | nat -> nat end.

Print nat.

Definition zero : nat :=
	nat.mk 0.

Print zero.

Definition succn : nat -> nat :=
	nat.mk 1.

Print succn.

Definition predn (n : nat) : nat :=
	match n : nat return fun (n : nat) => nat with
	| zero
	| fun (n : nat) => n
	end.

Print predn.
Whd predn (succn (succn zero)).

Definition addn (n : nat) : nat -> nat :=
	match rec n : nat return fun (n : nat) => nat -> nat with
	| fun (m : nat) => m
	| fun (n : nat) (addn : nat -> nat) (m : nat) => succn (addn m)
	end.

Print addn.
Eval addn (succn zero) (succn (succn zero)).

Definition list (T : Type) : Type :=
	ind list : Type | list | T -> list -> list end.

Print list.

Definition nil (T : Type) : list T := (list T).mk 0.
Definition cons (T : Type) : T -> list T -> list T := (list T).mk 1.

Definition size (T : Type) (l : list T) : nat :=
	match rec l : list T return fun (l : list T) => nat with
	| zero
	| fun (x : T) (l : list T) (ln : nat) => succn ln
	end.

Eval size nat (cons nat zero (cons nat zero (nil nat))).

Definition eq (A : Type) (a : A) : A -> Type :=
  ind eq : A -> Type | eq a end.

Print eq.
